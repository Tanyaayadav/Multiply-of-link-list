class Solution {
  public:
    string multiplyStrings(string& num1, string& num2) {
        // Handle negative numbers
        bool isNegative = false;
        if (num1[0] == '-') {
            isNegative = !isNegative;
            num1 = num1.substr(1);
        }
        if (num2[0] == '-') {
            isNegative = !isNegative;
            num2 = num2.substr(1);
        }

        // Remove leading zeros
        while (num1.size() > 1 && num1[0] == '0') num1.erase(0, 1);
        while (num2.size() > 1 && num2[0] == '0') num2.erase(0, 1);

        // If any number is "0", answer is "0"
        if (num1 == "0" || num2 == "0") return "0";

        int n = num1.size();
        int m = num2.size();
        vector<int> result(n + m, 0);

        // Multiply each digit
        for (int i = n - 1; i >= 0; i--) {
            for (int j = m - 1; j >= 0; j--) {
                int mul = (num1[i] - '0') * (num2[j] - '0');
                int sum = mul + result[i + j + 1];

                result[i + j] += sum / 10;
                result[i + j + 1] = sum % 10;
            }
        }

        // Convert result to string
        string ans;
        int i = 0;
        // Skip leading zeros
        while (i < result.size() && result[i] == 0) i++;

        for (; i < result.size(); i++) {
            ans += (result[i] + '0');
        }

        if (isNegative) ans = '-' + ans;

        return ans;
    }
};
