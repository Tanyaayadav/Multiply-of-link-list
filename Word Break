class TrieNode {
public:
    bool isEnd;
    unordered_map<char, TrieNode*> children;

    TrieNode() {
        isEnd = false;
    }
};

class Trie {
public:
    TrieNode* root;
    
    Trie() {
        root = new TrieNode();
    }
    
    void insert(string word) {
        TrieNode* node = root;
        for (char c : word) {
            if (node->children.find(c) == node->children.end()) {
                node->children[c] = new TrieNode();
            }
            node = node->children[c];
        }
        node->isEnd = true;
    }

    bool search(string word) {
        TrieNode* node = root;
        for (char c : word) {
            if (node->children.find(c) == node->children.end()) {
                return false;
            }
            node = node->children[c];
        }
        return node->isEnd;
    }
};

class Solution {
private:
    Trie trie;
    unordered_map<int, bool> memo; // Memoization to avoid recomputation

public:
    bool wordBreakHelper(string &s, int index) {
        if (index == s.size()) return true;
        if (memo.find(index) != memo.end()) return memo[index];

        TrieNode* node = trie.root;
        for (int i = index; i < s.size(); i++) {
            if (node->children.find(s[i]) == node->children.end()) break;
            node = node->children[s[i]];
            if (node->isEnd) {
                if (wordBreakHelper(s, i + 1)) {
                    return memo[index] = true;
                }
            }
        }
        return memo[index] = false;
    }

    bool wordBreak(string &s, vector<string> &dictionary) {
        for (string word : dictionary) {
            trie.insert(word);
        }
        return wordBreakHelper(s, 0);
    }
};
