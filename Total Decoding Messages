class Solution {
  public:
    int countWays(string &digits) {
        // Code here
        
        int n = digits.size();
        if (n == 0 || digits[0] == '0') return 0;

        // DP Array to store results of subproblems
        vector<int> dp(n + 1, 0);
        
        // Base cases
        dp[0] = 1;  // Empty string has 1 valid decoding
        dp[1] = 1;  // Single digit is valid if it's not '0'

        for (int i = 2; i <= n; ++i) {
            // Check if the current digit is valid
            if (digits[i - 1] > '0') 
                dp[i] += dp[i - 1];
            
            // Check if the last two digits form a valid number (10 to 26)
            if (digits[i - 2] == '1' || (digits[i - 2] == '2' && digits[i - 1] <= '6')) 
                dp[i] += dp[i - 2];
        }
        
        return dp[n];
        
    }
};
