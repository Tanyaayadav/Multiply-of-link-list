class Solution {
  public:
    vector<int> nthRowOfPascalTriangle(int n) {
        const int MOD = 1e9 + 7;
        vector<int> row;
        long long val = 1;
        row.push_back(1); // First element is always 1

        for (int i = 1; i < n; ++i) {
            val = (val * (n - i)) % MOD;
            val = (val * modInverse(i, MOD)) % MOD;
            row.push_back((int)val);
        }

        return row;
    }

  private:
    // Fermat's Little Theorem for modular inverse
    long long modInverse(int a, int mod) {
        return power(a, mod - 2, mod);
    }

    long long power(long long x, long long y, int mod) {
        long long res = 1;
        x = x % mod;
        while (y > 0) {
            if (y & 1)
                res = (res * x) % mod;
            y = y >> 1;
            x = (x * x) % mod;
        }
        return res;
    }
};
