class Solution {
  public:
    int orangesRotting(vector<vector<int>>& mat) {
        // Code here
        
        int n = mat.size(), m = mat[0].size();
        queue<pair<int, int>> q;
        int fresh = 0, time = 0;
        
        // Step 1: Store initial rotten oranges and count fresh oranges
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (mat[i][j] == 2) {
                    q.push({i, j}); // Store rotten oranges
                } else if (mat[i][j] == 1) {
                    fresh++; // Count fresh oranges
                }
            }
        }

        // Step 2: Perform BFS
        vector<int> dRow = {-1, 1, 0, 0}; // Row direction
        vector<int> dCol = {0, 0, -1, 1}; // Column direction
        
        while (!q.empty() && fresh > 0) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                int r = q.front().first;
                int c = q.front().second;
                q.pop();

                // Spread to adjacent fresh oranges
                for (int d = 0; d < 4; d++) {
                    int nr = r + dRow[d], nc = c + dCol[d];

                    // If the adjacent cell is fresh, rot it
                    if (nr >= 0 && nr < n && nc >= 0 && nc < m && mat[nr][nc] == 1) {
                        mat[nr][nc] = 2;
                        q.push({nr, nc});
                        fresh--;
                    }
                }
            }
            time++; // Increase time after each level of BFS
        }

        // Step 3: If fresh oranges remain, return -1; otherwise, return time
        return (fresh == 0) ? time : -1;
        
    }
};
