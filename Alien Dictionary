class Solution {
  public:
    string findOrder(vector<string> &words) {
        unordered_map<char, vector<char>> adj;
        unordered_map<char, int> indegree;
        
        // Step 1: Initialize the graph
        for (string word : words) {
            for (char c : word) {
                adj[c]; // ensure the character is in the adjacency list
                indegree[c]; // ensure every char has an indegree initialized
            }
        }

        // Step 2: Build the graph
        for (int i = 0; i < words.size() - 1; i++) {
            string w1 = words[i];
            string w2 = words[i + 1];
            int len = min(w1.size(), w2.size());
            bool found = false;
            for (int j = 0; j < len; j++) {
                if (w1[j] != w2[j]) {
                    adj[w1[j]].push_back(w2[j]);
                    indegree[w2[j]]++;
                    found = true;
                    break;
                }
            }
            // Edge case: prefix issue (["abc", "ab"] is invalid)
            if (!found && w1.size() > w2.size()) {
                return "";
            }
        }

        // Step 3: Topological sort using Kahn’s algorithm
        
            // Step 3: Topological sort using Kahn’s algorithm
        queue<char> q;
        for (auto it = indegree.begin(); it != indegree.end(); ++it) {
            if (it->second == 0) {
                q.push(it->first);
            }
        }


        string result;
        while (!q.empty()) {
            char curr = q.front();
            q.pop();
            result += curr;
            for (char neigh : adj[curr]) {
                indegree[neigh]--;
                if (indegree[neigh] == 0) {
                    q.push(neigh);
                }
            }
        }

        // If result length is less than total characters, it means there's a cycle
        if (result.size() != indegree.size()) return "";

        return result;
    }
};
