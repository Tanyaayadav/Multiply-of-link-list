#include <bits/stdc++.h>
using namespace std;

class Solution {
  public:
    void markParents(Node* root, unordered_map<Node*, Node*>& parent_track, Node* &targetNode, int target) {
        queue<Node*> q;
        q.push(root);
        while (!q.empty()) {
            Node* curr = q.front(); q.pop();
            if (curr->data == target)
                targetNode = curr;
            if (curr->left) {
                parent_track[curr->left] = curr;
                q.push(curr->left);
            }
            if (curr->right) {
                parent_track[curr->right] = curr;
                q.push(curr->right);
            }
        }
    }

    int minTime(Node* root, int target) {
        unordered_map<Node*, Node*> parent_track;
        Node* targetNode = NULL;
        
        // Step 1: Build parent map
        markParents(root, parent_track, targetNode, target);

        // Step 2: BFS from target node
        unordered_map<Node*, bool> visited;
        queue<Node*> q;
        q.push(targetNode);
        visited[targetNode] = true;

        int time = 0;

        while (!q.empty()) {
            int size = q.size();
            bool burntNewNode = false;

            for (int i = 0; i < size; i++) {
                Node* curr = q.front(); q.pop();

                // Check left child
                if (curr->left && !visited[curr->left]) {
                    burntNewNode = true;
                    visited[curr->left] = true;
                    q.push(curr->left);
                }
                // Check right child
                if (curr->right && !visited[curr->right]) {
                    burntNewNode = true;
                    visited[curr->right] = true;
                    q.push(curr->right);
                }
                // Check parent
                if (parent_track[curr] && !visited[parent_track[curr]]) {
                    burntNewNode = true;
                    visited[parent_track[curr]] = true;
                    q.push(parent_track[curr]);
                }
            }

            if (burntNewNode) time++;
        }

        return time;
    }
};
