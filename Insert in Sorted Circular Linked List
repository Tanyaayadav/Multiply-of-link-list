class Solution {
  public:
    Node* sortedInsert(Node* head, int data) {
        Node* newNode = new Node(data);
        
        // If list is empty, make the new node point to itself
        if (head == NULL) {
            newNode->next = newNode;
            return newNode;
        }
        
        Node* curr = head;
        
        while (true) {
            // Normal case: data fits between current and next
            if (curr->data <= data && data <= curr->next->data) {
                break;
            }
            
            // Turn-around point: max to min
            if (curr->data > curr->next->data) {
                if (data >= curr->data || data <= curr->next->data) {
                    break;
                }
            }
            
            curr = curr->next;
            
            // If we've come full circle, break
            if (curr == head) {
                break;
            }
        }
        
        // Insert newNode between curr and curr->next
        newNode->next = curr->next;
        curr->next = newNode;
        
        // If data is smaller than head->data, return newNode as new head
        return (data < head->data) ? newNode : head;
    }
};
